{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","react_default","a","createElement","className","App_ProgrammingLanguageRating","ProgrammingLanguageRating","state","value","data","url","urlRespons","handleChange","_this","bind","Object","assertThisInitialized","handleSubmit","event","this","setState","target","_this2","preventDefault","_ref","asyncToGenerator","regenerator_default","mark","_callee","api_url","answer","wrap","_context","prev","next","fetch","sent","json","console","log","stop","apply","arguments","getRequest","Fragment","onSubmit","class","id","onChange","for","type","App_LanguageRatingList","Component","LanguageRatingList","props","map","key","logo","src","alt","name","year","docs","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a2e59bee.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nconst App = () => (<div className='container'><ProgrammingLanguageRating /></div>)\nexport default App;\n\n\nclass ProgrammingLanguageRating extends Component {\n  state = {\n    value: 'frontend',\n    data: [],\n    url: 'https://frontend-test-api.alex93.now.sh/api/languages?group=',\n    urlRespons: 'https://frontend-test-api.alex93.now.sh/api/languages?group=frontend'\n  };\n  handleChange = this.handleChange.bind(this);\n  handleSubmit = this.handleSubmit.bind(this);\n\n  handleChange(event) {\n    this.setState({\n      value: event.target.value,\n      urlRespons: this.state.url + event.target.value\n    })\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n\n    const getRequest = async () => {\n      const api_url = await fetch(this.state.urlRespons);\n      const answer = await api_url.json();\n      await this.setState({ data: answer.data })\n      await console.log('data :', this.state.data);\n    }\n    getRequest();\n  }\n\n  render() {\n    return (\n      <>\n        <div>\n          <h1 className='row justify-content-md-center'>Programming Language Rating</h1>\n          <form className='form-group row justify-content-md-center' onSubmit={this.handleSubmit}>\n            <div class=\"input-group mb-3 col-sm-6\">\n              <select class=\"custom-select\" id=\"inputGroupSelect02\"\n                value={this.state.value} onChange={this.handleChange}>\n                <option value=\"backend\">Back-end</option>\n                <option value=\"frontend\">Front-end</option>\n                <option value=\"mobile\">Mobile</option>\n              </select>\n              <div class=\"input-group-append\">\n                <input class=\"input-group-text\" for=\"inputGroupSelect02\" type=\"submit\" value=\"Выбрать\" />\n              </div>\n            </div>\n          </form>\n        </div>\n        <LanguageRatingList data={this.state.data} />\n      </>\n    );\n  }\n}\n\nclass LanguageRatingList extends Component {\n  render() {\n    const { data } = this.props;\n    return <div class=\"card-columns\">\n      {data && data.map((data, id) =>\n        <div key={id} class=\"card\">\n          {data.logo && <img src={data.logo} alt=\"img\" class=\"card-img-bottom\" />}\n          <div className='card-body'>\n            <h4 className='card-title'>{data.name}</h4>\n            <h6 class=\"card-subtitle mb-2 text-muted\">{data.year}</h6>\n            {data.docs && <a href={data.docs} target='_blank' rel='noreferrer noopener' class=\"btn btn-info\">Документация</a>}\n          </div>\n        </div>)\n      }\n    </div>\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}